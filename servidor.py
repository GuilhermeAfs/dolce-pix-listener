from flask import Flask, request
import requests
import firebase_admin
from firebase_admin import credentials, db
import os
import json
import datetime

# Configura√ß√µes por vari√°vel de ambiente
ACCESS_TOKEN_MP = os.environ.get("ACCESS_TOKEN_MP")
FIREBASE_CREDENTIALS = os.environ.get("FIREBASE_CREDENTIALS")
DATABASE_URL = os.environ.get("DATABASE_URL")

# Inicializa√ß√£o do Firebase via env var
cred_dict = json.loads(FIREBASE_CREDENTIALS)
cred = credentials.Certificate(cred_dict)
firebase_admin.initialize_app(cred, {
    'databaseURL': DATABASE_URL
})

app = Flask(__name__)

def log(msg):
    hora = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{hora}] {msg}")

@app.route("/webhook", methods=["POST"])
def webhook():
    log("üîî Webhook recebido!")
    try:
        body = request.get_json(force=True)
        print("üì¶ Corpo recebido:", body)
    except Exception as e:
        print("‚ùå Erro ao processar JSON:", e)
        return "Erro no JSON", 400

    payment_id = body.get("data", {}).get("id")
    if not payment_id:
        print("‚ùå ID do pagamento n√£o encontrado.")
        return "ID n√£o encontrado", 400

    log(f"üîé Consultando pagamento ID: {payment_id}")

    response = requests.get(
        f"https://api.mercadopago.com/v1/payments/{payment_id}",
        headers={"Authorization": f"Bearer {ACCESS_TOKEN_MP}"}
    )

    if response.status_code != 200:
        print("‚ùå Erro na requisi√ß√£o ao Mercado Pago")
        print("üî¥ Status:", response.status_code)
        print("üìÑ Resposta:", response.text)
        return "Erro na API MP", 500

    data = response.json()
    valor = data.get("transaction_amount")
    status = data.get("status")
    metodo = data.get("payment_method_id")
    email = data.get("payer", {}).get("email")

    print(f"üìÑ Dados do pagamento:")
    print(f"   üßæ Valor: R$ {valor}")
    print(f"   ‚úÖ Status: {status}")
    print(f"   üí≥ M√©todo: {metodo}")
    print(f"   üìß Email: {email}")

    if status == "approved" and valor > 0.001:
        try:
            db.reference("/comando").set({"ligar": True})
            print("üî• Firebase atualizado com sucesso!")
        except Exception as e:
            print("‚ùå Erro ao atualizar Firebase:", e)
    else:
        print("‚ö†Ô∏è Pagamento n√£o aprovado ou valor inv√°lido.")

    return "OK", 200

# Inicia o servidor com a porta exigida pelo Render
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
